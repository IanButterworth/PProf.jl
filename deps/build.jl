# THIS FILE WAS MANUALLY CONSTRUCTED FOLLOWING THE STRUCTURE OF BINARYPROVIDER

using BinaryProvider

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))

# Instantiate products:
go_pprof = ExecutableProduct(prefix, "pprof", :go_pprof)
products = [go_pprof]

# Download binaries from hosted location
bin_prefix = "https://github.com/vchuravy/PProf.jl/releases/download/v0.1.2-dev"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    BinaryProvider.Linux(:aarch64, :glibc) => ("$bin_prefix/pprof_linux_arm64.tar.gz", ""),
    BinaryProvider.Linux(:armv7l, :glibc)  => ("$bin_prefix/pprof_linux_arm.tar.gz", ""),
    BinaryProvider.Linux(:i686, :glibc)    => ("$bin_prefix/pprof_linux_386.tar.gz", ""),
    BinaryProvider.Linux(:powerpc64le, :glibc) => ("$bin_prefix/pprof_linux_ppc64.tar.gz", ""),
    BinaryProvider.Linux(:x86_64, :glibc)  => ("$bin_prefix/pprof_linux_amd64.tar.gz", ""),

    BinaryProvider.FreeBSD(:x86_64)        => ("$bin_prefix/pprof_freebsd_amd64.tar.gz", ""),
    BinaryProvider.MacOS(:x86_64)          => ("$bin_prefix/pprof_darwin_amd64.tar.gz", ""),

    BinaryProvider.Windows(:i686)          => ("$bin_prefix/pprof_windows_386.exe.tar.gz", ""),
    BinaryProvider.Windows(:x86_64)        => ("$bin_prefix/pprof_windows_amd64.exe.tar.gz", "a47c33147f7e572f40178d47de54ad3a0a04e6b17a9fe3cf15791ba11203544e"),
)

# First, check to see if we're all satisfied
if any(!satisfied(p; verbose=verbose) for p in products)
    try
        # Download and install binaries
        url, tarball_hash = choose_download(download_info)
        install(url, tarball_hash; prefix=prefix, force=true, verbose=true)
    catch e
        if typeof(e) <: ArgumentError
            error("Your platform $(Sys.MACHINE) is not supported by this package!")
        else
            rethrow(e)
        end
    end

    # Finally, write out a deps.jl file
    write_deps_file(joinpath(@__DIR__, "deps.jl"), products)
end
